option(SHUTDOWN_CONFIRMATION "Shutdown confirmation" OFF)
option(PCBI6X_ELRSV3 "Enable ExpressLRS v3 configuration tool" NO) # ~4kB
option(PCBI6X_HELLO "Enable Hello World example tool" NO)
option(PCBI6X_PILOT "Enable Pilot tool" NO)
option(PCBI6X_USB_VBUS "Remove manual USB connection, just auto using VBUS, requires wiring USB VBUS to PA15 pad" NO)
option(PCBI6X_BACKLIGHT_MOD "Enable adjustable backlight, requires wiring BL pad to PC9 pad" NO)
option(AFHDS2A_LQI_CH "Send RSSI at channel 1-17" 17)

if(PCB STREQUAL I6X)
  set(PWR_BUTTON "SWITCH" CACHE STRING "Pwr button type (PRESS/SWITCH)")
  if(TRANSLATIONS STREQUAL EN)
    set(SPLASH "ON") # ~650B
  else()
    set(SPLASH "OFF")
  endif()
  set(CPU_TYPE STM32F0)
  set(CPU_TYPE_FULL STM32F072)  # for size report
  set(LINKER_SCRIPT targets/flysky/STM32F072VB_FLASH.ld)
  set(HAPTIC NO)
  set(FLAVOUR i6x)
  set(NANO YES)
  set(FRSKY_HUB NO)
  set(LUA NO)
  set(GUI_DIR 128x64)
  set(NAVIGATION_TYPE 9x)
  set(BITMAPS_TARGET 9x_bitmaps)
  set(FONTS_TARGET 9x_fonts_1bit)
  set(LCD_DRIVER lcd_driver.cpp)
  set(DEFAULT_MODE 2)
  set(GVAR_SCREEN model_gvars.cpp)
  set(AUX_SERIAL_DRIVER ../common/arm/stm32/aux_serial_driver.cpp)
  set(DEFAULT_TEMPLATE_SETUP "0" CACHE STRING "Default channel order")

  add_definitions(-DTELEMETRY_FRSKY)
  # add_definitions(-DGPS)
  add_definitions(-DCROSSFIRE)
  # add_definitions(-DNAVIGATION_POT1) # ~324B
  # add_definitions(-DNAVIGATION_POT2)
  add_definitions(-DSTM32F072)
  add_definitions(-DPWR_BUTTON_${PWR_BUTTON})
  add_definitions(-DEEPROM_VARIANT=0)
  add_definitions(-DSOFTWARE_VOLUME)
endif()

if(NOT AFHDS2A_LQI_CH)
  set(AFHDS2A_LQI_CH 17)
endif()
add_definitions(-DAFHDS2A_LQI_CH=${AFHDS2A_LQI_CH})

if(PCBI6X_USB_VBUS STREQUAL YES)
  add_definitions(-DPCBI6X_USB_VBUS)
endif()

if(PCBI6X_BACKLIGHT_MOD STREQUAL YES)
  add_definitions(-DPCBI6X_BACKLIGHT_MOD)
endif()

if(PCBI6X_ELRSV3 STREQUAL YES)
  add_definitions(-DPCBI6X_ELRSV3)
  set(TARGET_SRC
    ${TARGET_SRC}
    tools/elrsV3.cpp
    )
endif()

if(PCBI6X_HELLO STREQUAL YES)
  add_definitions(-DPCBI6X_HELLO)
set(TARGET_SRC
  ${TARGET_SRC}
  tools/hello.cpp
  )
endif()

if(PCBI6X_PILOT STREQUAL YES)
  add_definitions(-DPCBI6X_PILOT)
set(TARGET_SRC
  ${TARGET_SRC}
  tools/pilot.cpp
  )
endif()

add_definitions(-DPCBI6X_USB_MSD) # 3620B

set(TARGET_SRC
  ${TARGET_SRC}
  A7105_SPI.cpp
  AFHDS2A_a7105.cpp
  intmodule_pulses_driver.cpp
  trainer_driver.cpp
  ../common/arm/stm32/timers_driver.cpp
  )

add_definitions(-DSBUS)
set(PULSES_SRC
  ${PULSES_SRC}
  ../sbus.cpp
  )

set(HSE_VALUE 8000000)
set(SDCARD NO) # ~24kB
set(EEPROM EEPROM_RLC)
set(TARGET_DIR flysky)
set(PPM_LIMITS_SYMETRICAL YES)
set(DEFAULT_TEMPLATE_SETUP 21) # AETR
add_definitions(-DPCBI6X -DBUZZER)
# add_definitions(-DMENU_DIAG_ANAS_KEYS) # ~600B

if(NOT DEFAULT_TEMPLATE_SETUP STREQUAL "")
  add_definitions(-DDEFAULT_TEMPLATE_SETUP=${DEFAULT_TEMPLATE_SETUP})
endif()

set(GUI_SRC ${GUI_SRC}
  model_input_edit.cpp
  model_mix_edit.cpp
  model_display.cpp
  radio_diagkeys.cpp
  radio_diaganas.cpp
  radio_hardware.cpp
  view_channels.cpp
  view_telemetry.cpp
  view_about.cpp
  view_channels.cpp
  )

set(SRC ${SRC} buzzer.cpp)

set(TARGET_SRC
  ${TARGET_SRC}
  board.cpp
  buzzer_driver.cpp
  backlight_driver.cpp
  extmodule_driver.cpp
  adc_driver.cpp
  i2c_driver.cpp
  crc_driver.cpp
  ../common/arm/stm32/mixer_scheduler_driver.cpp
  )

set(FIRMWARE_TARGET_SRC
  ${FIRMWARE_TARGET_SRC}
  lcd_driver.cpp
  pwr_driver.cpp
  )
set(FIRMWARE_DEPENDENCIES ${FIRMWARE_DEPENDENCIES} ${BITMAPS_TARGET})
